import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
}

interface NotificationData {
  type: 'contact' | 'order'
  data: any
}

serve(async (req) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    console.log('üîî –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    
    const { type, data }: NotificationData = await req.json()
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')
    const TELEGRAM_CHAT_ID = Deno.env.get('TELEGRAM_CHAT_ID')
    
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      console.error('‚ùå Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Supabase Edge Functions' 
        }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    let message = ''
    
    if (type === 'contact') {
      message = `
üîî *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞*

üë§ *–ò–º—è:* ${data.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}
üìß *Email:* ${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${data.message}
üì± *–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å:* ${getContactMethod(data.preferredContact)}
üïê *–í—Ä–µ–º—è:* ${data.timestamp}
      `.trim()
    } else if (type === 'order') {
      const itemsList = data.items.map((item: any) => 
        `‚Ä¢ ${item.name} - ${item.quantity} —à—Ç. √ó ${item.price}‚ÇΩ`
      ).join('\n')

      message = `
üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${data.orderId}*

üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* ${data.customerName}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.customerPhone}
üìß *Email:* ${data.customerEmail || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç *–ê–¥—Ä–µ—Å:* ${data.customerAddress}

üì¶ *–¢–æ–≤–∞—Ä—ã:*
${itemsList}

üí∞ *–û–±—â–∞—è —Å—É–º–º–∞:* ${data.totalAmount}‚ÇΩ
üïê *–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:* ${data.timestamp}
      `.trim()
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`
    
    const telegramResponse = await fetch(telegramUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      })
    })

    const telegramResult = await telegramResponse.json()

    if (!telegramResponse.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramResult)
      throw new Error(`Telegram API error: ${telegramResult.description}`)
    }

    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        telegram: telegramResult
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Edge Function:', error)
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})

function getContactMethod(method: string): string {
  switch (method) {
    case 'phone': return 'üìû –¢–µ–ª–µ—Ñ–æ–Ω'
    case 'whatsapp': return 'üíö WhatsApp'
    case 'telegram': return 'üíô Telegram'
    default: return method
  }
}