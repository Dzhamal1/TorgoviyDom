import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
if (!window.fetch) {
  console.error('‚ùå –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ–±-—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä.');
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
window.addEventListener('error', (event) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ Facebook Pixel –∏ –¥—Ä—É–≥–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
  if (event.filename && (
    event.filename.includes('facebook.com') ||
    event.filename.includes('fbevents.js') ||
    event.filename.includes('bolt.new') ||
    event.filename.includes('sentry') ||
    event.filename.includes('debug-logger') ||
    event.message.includes('getReplayId') ||
    event.message.includes('Sentry Logger')
  )) {
    return;
  }
  console.error('üö® –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
});

window.addEventListener('unhandledrejection', (event) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  if (event.reason && typeof event.reason === 'string' && (
    event.reason.includes('facebook.com') ||
    event.reason.includes('ERR_CONNECTION_RESET') ||
    event.reason.includes('sentry') ||
    event.reason.includes('getReplayId')
  )) {
    return;
  }
  console.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', event.reason);
});

// –ü–æ–¥–∞–≤–ª—è–µ–º –ª–æ–≥–∏ Sentry –≤ –∫–æ–Ω—Å–æ–ª–∏
const originalConsoleLog = console.log;
const originalConsoleError = console.error;

console.log = (...args) => {
  const message = args.join(' ');
  if (message.includes('Sentry Logger') || 
      message.includes('Flushing outcomes') ||
      message.includes('No outcomes to send') ||
      message.includes('log entries are not shown') ||
      message.includes('debug-logger')) {
    return;
  }
  originalConsoleLog.apply(console, args);
};

console.error = (...args) => {
  const message = args.join(' ');
  if (message.includes('getReplayId') ||
      message.includes('Sentry Logger') ||
      message.includes('instrumentation handler')) {
    return;
  }
  originalConsoleError.apply(console, args);
};
// –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç #root');
}

// –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);
