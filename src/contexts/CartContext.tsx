
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react'
import { Product } from '../types'
import { useAuth } from './AuthContext'
import { supabase } from '../lib/supabase'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
export interface CartItem {
  id: string
  product: Product
  quantity: number
  addedAt: Date
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
interface CartContextType {
  items: CartItem[]
  totalItems: number
  totalPrice: number
  isLoading: boolean
  addItem: (product: Product, quantity?: number) => Promise<void>
  removeItem: (productId: string) => Promise<void>
  updateQuantity: (productId: string, quantity: number) => Promise<void>
  clearCart: () => Promise<void>
  getItemQuantity: (productId: string) => number
  syncCart: () => Promise<void>
}

const CartContext = createContext<CartContextType | undefined>(undefined)

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
export const useCart = () => {
  const context = useContext(CartContext)
  if (!context) {
    throw new Error('useCart must be used within a CartProvider')
  }
  return context
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã
export const CartProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [items, setItems] = useState<CartItem[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const { user } = useAuth()

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadCart()
  }, [user])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ Supabase –∏–ª–∏ localStorage
  const loadCart = async () => {
    setIsLoading(true)
    try {
      if (user) {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ Supabase –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.email)
        await loadCartFromSupabase()
      } else {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage (–≥–æ—Å—Ç—å)')
        loadCartFromLocalStorage()
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error)
      loadCartFromLocalStorage() // Fallback –∫ localStorage
    } finally {
      setIsLoading(false)
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ Supabase
  const loadCartFromSupabase = async () => {
    if (!user) return

    try {
      const { data, error } = await supabase
        .from('cart_items')
        .select('*')
        .eq('user_id', user.id)

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ Supabase:', error)
        return
      }

      if (data && data.length > 0) {
        const cartItems: CartItem[] = data.map(item => ({
          id: item.id,
          product: {
            id: item.product_id,
            name: item.product_name,
            price: item.product_price,
            image: item.product_image,
            category: item.product_category,
            description: `${item.product_name} - ${item.product_category}`,
            inStock: true
          },
          quantity: item.quantity,
          addedAt: new Date(item.created_at)
        }))

        setItems(cartItems)
        console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Supabase:', cartItems.length, '—Ç–æ–≤–∞—Ä–æ–≤')
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å localStorage
        localStorage.setItem('cart', JSON.stringify(cartItems))
      }
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Supabase:', error)
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage
  const loadCartFromLocalStorage = () => {
    try {
      const savedCart = localStorage.getItem('cart')
      if (savedCart) {
        const parsedCart = JSON.parse(savedCart)
        const cartWithDates = parsedCart.map((item: any) => ({
          ...item,
          addedAt: new Date(item.addedAt)
        }))
        setItems(cartWithDates)
        console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ localStorage:', cartWithDates.length, '—Ç–æ–≤–∞—Ä–æ–≤')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage:', error)
      localStorage.removeItem('cart')
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
  const saveCart = async (newItems: CartItem[]) => {
    // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    try {
      localStorage.setItem('cart', JSON.stringify(newItems))
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error)
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
    if (user) {
      try {
        await saveCartToSupabase(newItems)
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error)
      }
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ Supabase
  const saveCartToSupabase = async (cartItems: CartItem[]) => {
    if (!user) return

    try {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
      const { error: deleteError } = await supabase
        .from('cart_items')
        .delete()
        .eq('user_id', user.id)

      if (deleteError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π:', deleteError)
        return
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
      if (cartItems.length > 0) {
        const supabaseItems = cartItems.map(item => ({
          user_id: user.id,
          product_id: item.product.id,
          product_name: item.product.name,
          product_price: item.product.price,
          product_image: item.product.image,
          product_category: item.product.category,
          quantity: item.quantity
        }))

        const { error } = await supabase
          .from('cart_items')
          .insert(supabaseItems)

        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error)
        } else {
          console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase:', cartItems.length, '—Ç–æ–≤–∞—Ä–æ–≤')
        }
      }
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error)
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addItem = async (product: Product, quantity = 1): Promise<void> => {
    setIsLoading(true)
    
    try {
      const newItems = [...items]
      const existingItemIndex = newItems.findIndex(item => item.product.id === product.id)
      
      if (existingItemIndex >= 0) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        newItems[existingItemIndex].quantity += quantity
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        const newItem: CartItem = {
          id: `${product.id}-${Date.now()}`,
          product,
          quantity,
          addedAt: new Date()
        }
        newItems.push(newItem)
      }
      
      setItems(newItems)
      await saveCart(newItems)
      
      console.log('‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É:', product.name, 'x', quantity)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error)
      throw error
    } finally {
      setIsLoading(false)
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  const removeItem = async (productId: string): Promise<void> => {
    const newItems = items.filter(item => item.product.id !== productId)
    setItems(newItems)
    await saveCart(newItems)
    console.log('üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', productId)
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
  const updateQuantity = async (productId: string, quantity: number): Promise<void> => {
    if (quantity <= 0) {
      await removeItem(productId)
      return
    }

    const newItems = items.map(item =>
      item.product.id === productId
        ? { ...item, quantity }
        : item
    )
    
    setItems(newItems)
    await saveCart(newItems)
    console.log('üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', productId, '–Ω–∞', quantity)
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
  const clearCart = async (): Promise<void> => {
    setItems([])
    await saveCart([])
    console.log('üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞')
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  const getItemQuantity = (productId: string): number => {
    const item = items.find(item => item.product.id === productId)
    return item ? item.quantity : 0
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
  const syncCart = async (): Promise<void> => {
    await loadCart()
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
  const totalItems = items.reduce((total, item) => total + item.quantity, 0)

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const totalPrice = items.reduce((total, item) => total + (item.product.price * item.quantity), 0)

  const value: CartContextType = {
    items,
    totalItems,
    totalPrice,
    isLoading,
    addItem,
    removeItem,
    updateQuantity,
    clearCart,
    getItemQuantity,
    syncCart
  }

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  )
}
