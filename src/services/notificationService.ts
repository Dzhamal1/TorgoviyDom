import { supabase } from '../lib/supabase'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
interface ContactNotification {
  name: string
  phone: string
  email?: string
  message: string
  preferredContact: 'phone' | 'whatsapp' | 'telegram'
}

interface OrderNotification {
  orderId: string
  customerName: string
  customerPhone: string
  customerEmail?: string
  customerAddress: string
  items: Array<{
    name: string
    price: number
    quantity: number
  }>
  totalAmount: number
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è EmailJS - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ò –î–ê–ù–ù–´–ï
const EMAILJS_CONFIG = {
  serviceId: 'service_xxxxxxx',     // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Service ID
  templateId: 'template_xxxxxxx',   // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Template ID
  publicKey: 'xxxxxxxxxxxxxxx'     // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Public Key
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ EmailJS
const sendEmailNotification = async (type: 'contact' | 'order', data: any) => {
  try {
    console.log('üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ EmailJS:', type)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ EmailJS
    if (!EMAILJS_CONFIG.serviceId || EMAILJS_CONFIG.serviceId === 'service_xxxxxxx') {
      console.warn('‚ö†Ô∏è EmailJS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ EMAILJS_CONFIG –≤ notificationService.ts')
      return { success: false, error: 'EmailJS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' }
    }

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º EmailJS
    const emailjs = await import('@emailjs/browser')
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const templateParams = {
      to_email: 'info@td-stroika.ru',
      from_name: data.name || data.customerName,
      subject: type === 'order' ? `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${data.orderId}` : '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞',
      message: formatEmailMessage(type, data),
      customer_name: data.name || data.customerName,
      customer_phone: data.phone || data.customerPhone,
      customer_email: data.email || data.customerEmail || '–ù–µ —É–∫–∞–∑–∞–Ω',
      order_total: type === 'order' ? `${data.totalAmount}‚ÇΩ` : '',
      timestamp: new Date().toLocaleString('ru-RU')
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    const response = await emailjs.send(
      EMAILJS_CONFIG.serviceId,
      EMAILJS_CONFIG.templateId,
      templateParams,
      EMAILJS_CONFIG.publicKey
    )

    console.log('‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', response.status)
    return { success: true, response }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error)
    return { success: false, error: error.message }
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è email
const formatEmailMessage = (type: 'contact' | 'order', data: any): string => {
  if (type === 'contact') {
    return `
–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ "–¢–æ—Ä–≥–æ–≤—ã–π –¥–æ–º –í—Å–µ –¥–ª—è —Å—Ç—Ä–æ–π–∫–∏"

üë§ –ò–º—è: ${data.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
üìß Email: ${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}
üì± –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å: ${getContactMethod(data.preferredContact)}
üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
    `.trim()
  } else {
    const itemsList = data.items.map((item: any) => 
      `‚Ä¢ ${item.name} - ${item.quantity} —à—Ç. √ó ${item.price}‚ÇΩ = ${item.quantity * item.price}‚ÇΩ`
    ).join('\n')

    return `
üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${data.orderId}

üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${data.customerName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.customerPhone}
üìß Email: ${data.customerEmail || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${data.customerAddress}

üì¶ –¢–æ–≤–∞—Ä—ã:
${itemsList}

üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${data.totalAmount}‚ÇΩ
üïê –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: ${new Date().toLocaleString('ru-RU')}

---
–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ —Å–∞–π—Ç "–¢–æ—Ä–≥–æ–≤—ã–π –¥–æ–º –í—Å–µ –¥–ª—è —Å—Ç—Ä–æ–π–∫–∏"
    `.trim()
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —á–µ—Ä–µ–∑ Edge Function
const sendTelegramNotification = async (payload: any) => {
  try {
    console.log('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...')
    
    const { data, error } = await supabase.functions.invoke('send-notification', {
      body: payload
    })

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
      return { success: false, error }
    }

    console.log('‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    return { success: true, data }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram:', error)
    return { success: false, error }
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
export const saveContactMessage = async (data: ContactNotification) => {
  try {
    console.log('üíæ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:', data.name)
    
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const { data: savedMessage, error: dbError } = await supabase
      .from('contact_messages')
      .insert([
        {
          name: data.name,
          phone: data.phone,
          email: data.email || null,
          message: data.message,
          preferred_contact: data.preferredContact,
          status: 'new'
        }
      ])
      .select()
      .single()

    if (dbError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î:', dbError)
      throw new Error(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbError.message}`)
    }

    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:', savedMessage.id)

    const messageData = {
      ...data,
      id: savedMessage.id,
      timestamp: new Date().toLocaleString('ru-RU')
    }

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const emailResult = await sendEmailNotification('contact', messageData)
    
    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramResult = await sendTelegramNotification({
      type: 'contact',
      data: messageData
    })

    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
    return { 
      success: true, 
      data: savedMessage,
      emailSent: emailResult.success,
      telegramSent: telegramResult.success
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    return { success: false, error: { message: error.message } }
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
export const saveOrder = async (data: OrderNotification) => {
  try {
    console.log('üõí –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞ –æ—Ç:', data.customerName)
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', JSON.stringify(data, null, 2))
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    if (!supabase) {
      throw new Error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    }
    
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const orderToInsert = {
      customer_name: data.customerName.trim(),
      customer_phone: data.customerPhone.trim(),
      customer_email: data.customerEmail?.trim() || null,
      customer_address: data.customerAddress.trim(),
      items: data.items,
      total_amount: Number(data.totalAmount),
      status: 'new'
    }
    
    console.log('üíæ –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î:', JSON.stringify(orderToInsert, null, 2))
    
    const { data: savedOrder, error: dbError } = await supabase
      .from('orders')
      .insert([orderToInsert])
      .select()
      .single()

    if (dbError) {
      console.error('‚ùå –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ë–î:')
      console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', dbError.code)
      console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', dbError.message)
      console.error('–î–µ—Ç–∞–ª–∏:', dbError.details)
      console.error('–ü–æ–¥—Å–∫–∞–∑–∫–∞:', dbError.hint)
      
      // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
      if (dbError.code === '42501') {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏.')
      }
      if (dbError.code === '23505') {
        throw new Error('–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
      }
      if (dbError.message.includes('relation "orders" does not exist')) {
        throw new Error('–¢–∞–±–ª–∏—Ü–∞ orders –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
      }
      
      throw new Error(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbError.message}`)
    }

    console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID:', savedOrder.id)

    const orderData = {
      ...data,
      orderId: savedOrder.id,
      timestamp: new Date().toLocaleString('ru-RU')
    }

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ)
    console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...')
    const emailResult = await sendEmailNotification('order', orderData)
    if (!emailResult.success) {
      console.warn('‚ö†Ô∏è Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', emailResult.error)
    }
    
    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ)
    console.log('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...')
    const telegramResult = await sendTelegramNotification({
      type: 'order',
      data: orderData
    })
    if (!telegramResult.success) {
      console.warn('‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', telegramResult.error)
    }

    console.log('‚úÖ –ó–∞–∫–∞–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω')
    return { 
      success: true, 
      data: savedOrder,
      emailSent: emailResult.success,
      telegramSent: telegramResult.success
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', error)
    console.error('Stack trace:', error.stack)
    return { success: false, error: { message: error.message } }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
function getContactMethod(method: string): string {
  switch (method) {
    case 'phone': return 'üìû –¢–µ–ª–µ—Ñ–æ–Ω'
    case 'whatsapp': return 'üíö WhatsApp'
    case 'telegram': return 'üíô Telegram'
    default: return method
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
export const getNotificationStats = async () => {
  try {
    const [contactMessages, orders] = await Promise.all([
      supabase
        .from('contact_messages')
        .select('status')
        .eq('status', 'new'),
      supabase
        .from('orders')
        .select('status')
        .eq('status', 'new')
    ])

    return {
      newMessages: contactMessages.data?.length || 0,
      newOrders: orders.data?.length || 0
    }
  } catch (error) {
    console.error('Error getting notification stats:', error)
    return { newMessages: 0, newOrders: 0 }
  }
}