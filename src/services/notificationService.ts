import { supabase } from '../lib/supabase'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
interface ContactNotification {
  name: string
  phone: string
  email?: string
  message: string
  preferredContact: 'phone' | 'whatsapp' | 'telegram'
}

interface OrderNotification {
  orderId: string
  customerName: string
  customerPhone: string
  customerEmail?: string
  customerAddress: string
  items: Array<{
    name: string
    price: number
    quantity: number
  }>
  totalAmount: number
}

// EmailJS –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è; –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Edge Function/Resend

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ Resend (Edge Function)
const sendEmailNotification = async (type: 'contact' | 'order', data: any) => {
  try {
    console.log('üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Resend:', type)
    
    // –î–æ–±–∞–≤–ª—è–µ–º timestamp –∫ –¥–∞–Ω–Ω—ã–º
    const emailData = {
      ...data,
      timestamp: new Date().toLocaleString('ru-RU')
    }

    // –í—ã–∑—ã–≤–∞–µ–º Edge Function –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    const { data: result, error } = await supabase.functions.invoke('send-email', {
      body: {
        type,
        data: emailData
      }
    })

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Edge Function send-email:', error)
      return { success: false, error: error.message }
    }

    if (result && result.success) {
      console.log('‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ Resend')
      return { success: true, resendId: result.resendId }
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', result?.error)
      return { success: false, error: result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }
    }
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : String(error)
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', message)
    return { success: false, error: message }
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ Edge Function (send-email)

// –ü—Ä–æ—Å—Ç–∞—è –æ–±–µ—Ä—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
const withTimeout = async <T>(promise: Promise<T>, ms: number): Promise<T | { timeout: true }> => {
  return Promise.race([
    promise,
    new Promise(resolve => setTimeout(() => resolve({ timeout: true } as const), ms)) as Promise<{ timeout: true }>
  ])
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —á–µ—Ä–µ–∑ Edge Function
const sendTelegramNotification = async (payload: any) => {
  try {
    console.log('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...')
    
    const { data, error } = await supabase.functions.invoke('send-notification', {
      body: payload
    })

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
      return { success: false, error }
    }

    console.log('‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    return { success: true, data }
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : String(error)
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram:', message)
    return { success: false, error: message }
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
export const saveContactMessage = async (data: ContactNotification) => {
  try {
    console.log('üíæ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:', data.name)
    
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    const { data: savedMessage, error: dbError } = await supabase
      .from('contact_messages')
      .insert([
        {
          name: data.name,
          phone: data.phone,
          email: data.email || null,
          message: data.message,
          preferred_contact: data.preferredContact,
          status: 'new'
        }
      ])
      .select()
      .single()

    let dbSaved = true
    if (dbError) {
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      dbSaved = false
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ë–î):', dbError)
    } else {
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:', savedMessage?.id)
    }

    const messageData = {
      ...data,
      id: savedMessage?.id,
      timestamp: new Date().toLocaleString('ru-RU')
    }

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const emailResult = await withTimeout(sendEmailNotification('contact', messageData), 4000)
    const telegramResult = await withTimeout(
      sendTelegramNotification({ type: 'contact', data: messageData }),
      4000
    )

    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
    const emailSent = (emailResult as any)?.success === true
    const telegramSent = (telegramResult as any)?.success === true
    return {
      success: dbSaved || emailSent || telegramSent,
      data: savedMessage || null,
      dbSaved,
      emailSent,
      telegramSent,
      error: dbSaved ? undefined : { message: dbError?.message }
    }
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : String(error)
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', message)
    return { success: false, error: { message } }
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
export const saveOrder = async (data: OrderNotification & { userId?: string }) => {
  try {
    console.log('üõí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –æ—Ç:', data.customerName)
    
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    const { data: savedOrder, error: dbError } = await supabase
      .from('orders')
      .insert([
        {
          user_id: data.userId ?? null,
          customer_name: data.customerName,
          customer_phone: data.customerPhone,
          customer_email: data.customerEmail || null,
          customer_address: data.customerAddress,
          items: data.items,
          total_amount: data.totalAmount,
          status: 'new'
        }
      ])
      .select()
      .single()

    if (dbError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ë–î:', dbError)
      return { success: false, error: { message: dbError.message } }
    }
    console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:', savedOrder?.id)

    const orderData = {
      ...data,
      orderId: savedOrder?.id || data.orderId,
      timestamp: new Date().toLocaleString('ru-RU')
    }

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const emailResult = await withTimeout(sendEmailNotification('order', orderData), 4000)
    const telegramResult = await withTimeout(
      sendTelegramNotification({ type: 'order', data: orderData }),
      4000
    )

    console.log('‚úÖ –ó–∞–∫–∞–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω')
    return { 
      success: true, 
      data: savedOrder || null,
      emailSent: (emailResult as any)?.success === true,
      telegramSent: (telegramResult as any)?.success === true
    }
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : String(error)
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', message)
    return { success: false, error: { message } }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
// getContactMethod –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email, —Å–µ–π—á–∞—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
export const getNotificationStats = async () => {
  try {
    const { data: contactMessages, error: contactError } = await supabase
      .from('contact_messages')
      .select('status')
      .eq('status', 'new');

    const { data: orders, error: ordersError } = await supabase
      .from('orders')
      .select('status')
      .eq('status', 'new');

    if (contactError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', contactError.message);
    }
    if (ordersError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', ordersError.message);
    }

    return {
      newMessages: contactMessages?.length || 0,
      newOrders: orders?.length || 0,
      contactError,
      ordersError
    };
  } catch (error) {
    console.error('Error getting notification stats:', error);
    return { newMessages: 0, newOrders: 0, error };
  }
};