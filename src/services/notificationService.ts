import { supabase } from '../lib/supabase'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
interface ContactNotification {
  name: string
  phone: string
  email?: string
  message: string
  preferredContact: 'phone' | 'whatsapp' | 'telegram'
}

interface OrderNotification {
  orderId: string
  customerName: string
  customerPhone: string
  customerEmail?: string
  customerAddress: string
  items: Array<{
    name: string
    price: number
    quantity: number
  }>
  totalAmount: number
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const EMAIL_CONFIG = {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º EmailJS –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏
  serviceId: 'service_construction_store',
  templateId: 'template_order_notification',
  publicKey: 'your_emailjs_public_key'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ EmailJS
const sendEmailNotification = async (type: 'contact' | 'order', data: any) => {
  try {
    console.log('üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', type)
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è email
    const emailData = {
      to_email: 'info@td-stroika.ru', // Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      from_name: '–¢–æ—Ä–≥–æ–≤—ã–π –¥–æ–º "–í—Å–µ –¥–ª—è —Å—Ç—Ä–æ–π–∫–∏"',
      subject: type === 'order' ? `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${data.orderId}` : '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞',
      message: formatEmailMessage(type, data)
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ fetch –∫ EmailJS API
    const response = await fetch('https://api.emailjs.com/api/v1.0/email/send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        service_id: 'default_service',
        template_id: 'template_order',
        user_id: 'public_key',
        template_params: emailData
      })
    })

    if (response.ok) {
      console.log('‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
      return { success: true }
    } else {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', response.statusText)
      return { success: false, error: response.statusText }
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', error.message)
    return { success: false, error: error.message }
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è email
const formatEmailMessage = (type: 'contact' | 'order', data: any): string => {
  if (type === 'contact') {
    return `
–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞

–ò–º—è: ${data.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
Email: ${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}
–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å: ${getContactMethod(data.preferredContact)}
–í—Ä–µ–º—è: ${data.timestamp}
    `.trim()
  } else {
    const itemsList = data.items.map((item: any) => 
      `‚Ä¢ ${item.name} - ${item.quantity} —à—Ç. √ó ${item.price}‚ÇΩ`
    ).join('\n')

    return `
–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${data.orderId}

–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${data.customerName}
–¢–µ–ª–µ—Ñ–æ–Ω: ${data.customerPhone}
Email: ${data.customerEmail || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–ê–¥—Ä–µ—Å: ${data.customerAddress}

–¢–æ–≤–∞—Ä—ã:
${itemsList}

–û–±—â–∞—è —Å—É–º–º–∞: ${data.totalAmount}‚ÇΩ
–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: ${data.timestamp}
    `.trim()
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ Edge Function (—Ç–µ–ø–µ—Ä—å –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è)
const safeSendTelegramNotification = async (payload: any) => {
  try {
    console.log('üì± –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ)...')
    
    const { data, error } = await supabase.functions.invoke('send-notification', {
      body: payload
    })

    if (error) {
      console.warn('‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', error.message)
      return { success: false, error }
    }

    console.log('‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    return { success: true, data }
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message)
    return { success: false, error }
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
export const saveContactMessage = async (data: ContactNotification) => {
  try {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.name)
    
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const { data: savedMessage, error } = await supabase
      .from('contact_messages')
      .insert([
        {
          name: data.name,
          phone: data.phone,
          email: data.email,
          message: data.message,
          preferred_contact: data.preferredContact,
          status: 'new'
        }
      ])
      .select()
      .single()

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    }

    const messageData = {
      ...data,
      timestamp: new Date().toLocaleString('ru-RU')
    }

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ü–†–ò–û–†–ò–¢–ï–¢)
    const emailResult = await sendEmailNotification('contact', messageData)
    
    // 3. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram (–≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ)
    safeSendTelegramNotification({
      type: 'contact',
      data: messageData
    }).catch(err => {
      console.warn('‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ:', err.message)
    })

    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
    return { 
      success: true, 
      data: savedMessage || { id: Date.now(), ...data },
      emailSent: emailResult.success
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    return { success: false, error }
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
export const saveOrder = async (data: OrderNotification) => {
  try {
    console.log('üõí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑:', data.customerName)
    
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    let savedOrder = null
    try {
      const { data: orderData, error } = await supabase
        .from('orders')
        .insert([
          {
            customer_name: data.customerName,
            customer_phone: data.customerPhone,
            customer_email: data.customerEmail,
            customer_address: data.customerAddress,
            items: data.items,
            total_amount: data.totalAmount,
            status: 'new'
          }
        ])
        .select()
        .single()

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ë–î:', error)
      } else {
        savedOrder = orderData
        console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:', savedOrder.id)
      }
    } catch (dbError) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î:', dbError)
    }

    const orderData = {
      ...data,
      orderId: savedOrder?.id || data.orderId || `ORDER-${Date.now()}`,
      timestamp: new Date().toLocaleString('ru-RU')
    }

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ì–õ–ê–í–ù–´–ô –ü–†–ò–û–†–ò–¢–ï–¢)
    console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ...')
    const emailResult = await sendEmailNotification('order', orderData)
    
    if (emailResult.success) {
      console.log('‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    } else {
      console.warn('‚ö†Ô∏è Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', emailResult.error)
    }

    // 3. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram (–≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å)
    safeSendTelegramNotification({
      type: 'order',
      data: orderData
    }).catch(err => {
      console.warn('‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', err.message)
    })

    console.log('‚úÖ –ó–∞–∫–∞–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω')
    return { 
      success: true, 
      data: savedOrder || orderData,
      emailSent: emailResult.success
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', error)
    
    // –î–∞–∂–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email
    try {
      await sendEmailNotification('order', {
        ...data,
        orderId: `EMERGENCY-${Date.now()}`,
        timestamp: new Date().toLocaleString('ru-RU')
      })
      console.log('‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    } catch (emailError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ email:', emailError)
    }
    
    return { success: false, error }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
function getContactMethod(method: string): string {
  switch (method) {
    case 'phone': return 'üìû –¢–µ–ª–µ—Ñ–æ–Ω'
    case 'whatsapp': return 'üíö WhatsApp'
    case 'telegram': return 'üíô Telegram'
    default: return method
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
export const getNotificationStats = async () => {
  try {
    const [contactMessages, orders] = await Promise.all([
      supabase
        .from('contact_messages')
        .select('status')
        .eq('status', 'new'),
      supabase
        .from('orders')
        .select('status')
        .eq('status', 'new')
    ])

    return {
      newMessages: contactMessages.data?.length || 0,
      newOrders: orders.data?.length || 0
    }
  } catch (error) {
    console.error('Error getting notification stats:', error)
    return { newMessages: 0, newOrders: 0 }
  }
}