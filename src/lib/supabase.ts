import { createClient } from '@supabase/supabase-js'

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Supabase
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

// –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:')
console.log('URL:', supabaseUrl ? `${supabaseUrl.substring(0, 30)}...` : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')
console.log('ANON KEY:', supabaseAnonKey ? `${supabaseAnonKey.substring(0, 20)}...` : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase!')
  console.error('üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞')
  console.error('üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å VITE_')
  console.error('üìù –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è .env')
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞
  console.error('üìù –ü—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞:')
  console.error('VITE_SUPABASE_URL=https://your-project.supabase.co')
  console.error('VITE_SUPABASE_ANON_KEY=your-anon-key-here')
  
  // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
  throw new Error('Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env')
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è SPA
    debug: import.meta.env.DEV,
    flowType: 'pkce',
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    storage: {
      getItem: (key) => {
        try {
          return localStorage.getItem(key)
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage:', error)
          return null
        }
      },
      setItem: (key, value) => {
        try {
          localStorage.setItem(key, value)
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ localStorage:', error)
        }
      },
      removeItem: (key) => {
        try {
          localStorage.removeItem(key)
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è localStorage:', error)
        }
      }
    }
  },
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  global: {
    headers: {
      'X-Client-Info': 'construction-store-app',
    },
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ fetch —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    fetch: (url, options = {}) => {
      console.log('üåê Supabase –∑–∞–ø—Ä–æ—Å:', url)
      
      return fetch(url, {
        ...options,
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        signal: AbortSignal.timeout(15000),
        headers: {
          ...options.headers,
          'Connection': 'keep-alive',
        }
      }).catch(error => {
        console.error('üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error.message)
        
        if (error.name === 'AbortError') {
          throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
        }
        if (error.message.includes('ERR_CONNECTION_RESET')) {
          throw new Error('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ')
        }
        if (error.message.includes('Failed to fetch')) {
          throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
        }
        
        throw error
      })
    }
  },
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã realtime (–æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤)
  realtime: {
    params: {
      eventsPerSecond: 1
    }
  }
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
const testSupabaseConnection = async () => {
  try {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const { data, error } = await supabase.auth.getSession()
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message)
      console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.status)
      
      if (error.message.includes('Invalid API key')) {
        console.error('üîë –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å VITE_SUPABASE_ANON_KEY –≤ —Ñ–∞–π–ª–µ .env')
      }
      if (error.message.includes('Invalid URL')) {
        console.error('üåê –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å VITE_SUPABASE_URL –≤ —Ñ–∞–π–ª–µ .env')
      }
      if (error.status === 401) {
        console.error('üîê –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Supabase Dashboard')
      }
    } else {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase')
      console.log('–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:', data.session ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
      
      if (data.session) {
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', data.session.user.email)
        console.log('üïê –ò—Å—Ç–µ–∫–∞–µ—Ç:', new Date(data.session.expires_at * 1000).toLocaleString())
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü...')
    
    const { data: profilesTest, error: profilesError } = await supabase
      .from('profiles')
      .select('count')
      .limit(1)
    
    if (profilesError) {
      console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ profiles –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', profilesError.message)
      console.error('üîß –†–ï–®–ï–ù–ò–ï: –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ DATABASE_SETUP.md')
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ profiles –¥–æ—Å—Ç—É–ø–Ω–∞')
    }
    
    const { data: cartTest, error: cartError } = await supabase
      .from('cart_items')
      .select('count')
      .limit(1)
    
    if (cartError) {
      console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ cart_items –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', cartError.message)
      console.error('üîß –†–ï–®–ï–ù–ò–ï: –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ DATABASE_SETUP.md')
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ cart_items –¥–æ—Å—Ç—É–ø–Ω–∞')
    }
    
  } catch (err) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err.message)
    
    if (err.message.includes('ERR_CONNECTION_RESET')) {
      console.error('üîÑ –†–ï–®–ï–ù–ò–ï: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
    }
    if (err.message.includes('Failed to fetch')) {
      console.error('üåê –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å supabase.co')
    }
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
// –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –ª–æ–≥–æ–≤
if (import.meta.env.DEV) {
  setTimeout(testSupabaseConnection, 2000)
}

// –¢–∏–ø—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export interface Profile {
  id: string
  email: string
  full_name: string
  phone?: string
  created_at: string
  updated_at: string
}

export interface CartItem {
  id: string
  user_id: string
  product_id: string
  product_name: string
  product_price: number
  product_image: string
  product_category: string
  quantity: number
  created_at: string
}

export interface ContactMessage {
  id: string
  name: string
  phone: string
  email?: string
  message: string
  preferred_contact: 'phone' | 'whatsapp' | 'telegram'
  status: 'new' | 'processed'
  created_at: string
}

export interface Order {
  id: string
  user_id?: string
  customer_name: string
  customer_phone: string
  customer_email?: string
  customer_address: string
  items: any[]
  total_amount: number
  status: 'new' | 'confirmed' | 'processing' | 'shipped' | 'delivered' | 'cancelled'
  created_at: string
}