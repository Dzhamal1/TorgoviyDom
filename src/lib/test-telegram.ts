import { supabase } from './supabase'

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const testTelegramNotification = async () => {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...')
    
    const testData = {
      type: 'contact' as const,
      data: {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        phone: '+7 (900) 123-45-67',
        email: 'test@example.com',
        message: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        preferredContact: 'telegram' as const,
        timestamp: new Date().toLocaleString('ru-RU')
      }
    }

    const { data, error } = await supabase.functions.invoke('send-notification', {
      body: testData
    })

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram:', error)
      return { success: false, error }
    }

    console.log('‚úÖ Telegram —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω:', data)
    return { success: true, data }
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : String(error)
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram:', message)
    return { success: false, error: message }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export const checkTelegramConfig = () => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram...')
  console.log('–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:')
  console.log('1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather')
  console.log('2. –î–æ–±–∞–≤—å—Ç–µ –≤ Supabase Dashboard ‚Üí Settings ‚Üí Environment Variables:')
  console.log('   TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞')
  console.log('   TELEGRAM_CHAT_ID=–≤–∞—à_chat_id')
  console.log('3. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ Edge Function: supabase functions deploy send-notification')
}
